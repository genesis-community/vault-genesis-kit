#!/bin/bash
set -eu

if [[ $GENESIS_DEPLOY_RC == 0 ]]; then

      echo
  describe "#M{$GENESIS_ENVIRONMENT} Vault deployed!"
      echo

  if [[ -s "$GENESIS_PREDEPLOY_DATAFILE" && $(lookup params.auxiliary_vault) != "true" ]] ; then
      echo "Unsealing the vault..."
    safe -T "$GENESIS_ENVIRONMENT" unseal < "$GENESIS_PREDEPLOY_DATAFILE"
    safe -T "$GENESIS_ENVIRONMENT" status
  else
  describe "Unable to unseal the vault.  If this is a new deployment, you will need to" \
           "initalize the vault first.  To do so, run" \
           "" \
           "  #G{genesis do $GENESIS_ENVIRONMENT -- init}" \
           "" \
           "If this was not the initial deployment of the Vault, you will need to unseal it:" \
           "" \
           "  #G{genesis do $GENESIS_ENVIRONMENT -- unseal}"
  fi
  describe "" \
           "For details about the deployment, run" \
           "" \
           "  #G{genesis info $GENESIS_ENVIRONMENT}" \
           ""
  if safe vault secrets list --detailed | grep ^secret/ | grep 'map\[version:1\]' ; then
           "---" \
           "" \
           "This version of Vault supports versioning secrets, but it does not automatically"
           "update existing KV Secret Engine mounts.  To turn it on, you must run" \
           "" \
           "  #G{safe vault kv enable-versioning secret}" \
           "" \
           "You will need to be authorised with the root token, and have Vault v0.11.0 or" \
           "higher installed locally to perform this." \
           "" \
           "#Y{NOTE:} Once versioning is turned on for a secrets backend, it cannot be" \
           "      turned off without deleting and recreating that backend." \
           ""
  fi
fi
